// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * ===========================
 *           MODELS
 * ===========================
 */

model Tenant {
  id             String    @id @default(cuid())
  name           String
  slug           String    @unique
  domain         String?   @unique
  logo           String?
  favicon        String?
  primaryColor   String    @default("#3B82F6")
  secondaryColor String    @default("#1E40AF")
  accentColor    String    @default("#10B981")
  description    String?
  website        String?
  email          String?
  phone          String?
  address        String?
  plan           String    @default("starter")
  status         String    @default("trial")
  trialEndsAt    DateTime?
  subscriptionId String?
  customerId     String?
  settings       Json      @default("{}")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  jobs             Job[]
  projects         Project[]
  users            User[]
  activationTokens ActivationToken[] // <-- lado oposto da relação

  @@unique([customerId])
  @@unique([subscriptionId])

  @@index([slug])

  @@map("tenants")
}

model User {
  id             String    @id @default(cuid())
  email          String
  name           String?
  tenantId       String
  role           UserRole  @default(USER)
  isActive       Boolean   @default(false)
  supabaseUserId String?   @unique
  activatedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  jobs      Job[]
  projects  Project[]
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([email, tenantId], name: "email_tenantId")

  @@index([tenantId])
  @@index([email])

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  tenantId    String
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([userId])

  @@map("projects")
}

model Job {
  id           String    @id @default(cuid())
  title        String
  description  String?
  department   String?
  location     String?
  type         String?
  salary       String?
  requirements Json      @default("[]")
  benefits     Json      @default("[]")
  status       JobStatus @default(ACTIVE)
  tenantId     String
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  level        String?

  tenant       Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([status])

  @@map("jobs")
}

model ActivationToken {
  id            String   @id @default(cuid())
  tokenHash     String   @unique
  email         String
  userId        String
  tenantId      String
  expiresAt     DateTime
  isUsed        Boolean  @default(false)
  usedAt        DateTime?
  createdFromIp String?
  usedFromIp    String?
  createdAt     DateTime @default(now())

  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([email, tenantId, isUsed])
  @@index([expiresAt])

  @@map("activation_tokens")
}

model WebhookEvent {
  id        String   @id
  type      String
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([type])

  @@map("webhook_events")
}

model SystemAdmin {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  role      String    @default("SUPER_ADMIN")
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?

  @@index([isActive])

  @@map("system_admins")
}

/**
 * ===========================
 *            ENUMS
 * ===========================
 */
enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum JobStatus {
  ACTIVE
  PAUSED
  CLOSED
}
