generator client {
  provider = "prisma-client-js"
}

generator seed {
  provider = "tsx"
  output   = "./seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  subdomain   String   @unique
  logoUrl     String?
  primaryColor String  @default("#3B82F6")
  
  // Configurações
  isActive    Boolean  @default(true)
  plan        String   @default("basic")
  
  // Relacionamentos
  users       User[]
  candidates  Candidate[]
  positions   Position[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("companies")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("admin")
  
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

model Candidate {
  id          String    @id @default(cuid())
  name        String
  email       String
  phone       String?
  location    String?
  age         Int?
  
  // Profile
  summary     String?
  experience  Int       @default(0)
  education   String?
  salary      String?
  availability String   @default("integral")
  
  // Skills e IA
  skills      Json      @default("[]")
  aiAnalysis  Json?     // Análise completa da IA
  overallScore Float?   // Score 0-100
  
  // Status
  status      String    @default("disponivel")
  isActive    Boolean   @default(true)
  
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  
  applications Application[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([email, companyId])
  @@map("candidates")
}

model Position {
  id             String    @id @default(cuid())
  title          String
  description    String?
  department     String?
  
  requiredSkills Json      @default("[]")
  minExperience  Int       @default(0)
  requiredEducation String @default("ensino_medio")
  salaryRange    String?
  workType       String    @default("integral")
  
  isActive       Boolean   @default(true)
  urgency        String    @default("media")
  
  company        Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      String
  
  applications   Application[]
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  @@map("positions")
}

model Application {
  id          String    @id @default(cuid())
  
  matchScore  Float     // 0-100
  aiAnalysis  Json?     // Análise da IA
  status      String    @default("novo")
  
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String
  
  position    Position  @relation(fields: [positionId], references: [id], onDelete: Cascade)
  positionId  String
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([candidateId, positionId])
  @@map("applications")
}