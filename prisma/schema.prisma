// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Multi-tenant models
model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  domain    String?  @unique
  
  // Branding & Customization
  logo      String?  // URL to logo image
  favicon   String?  // URL to favicon
  primaryColor   String @default("#3B82F6") // Primary brand color
  secondaryColor String @default("#1E40AF") // Secondary brand color
  accentColor    String @default("#10B981") // Accent color
  
  // Company Information
  description String?
  website     String?
  email       String?
  phone       String?
  address     String?
  
  // Subscription & Billing
  plan           String @default("starter") // starter, professional, enterprise
  status         String @default("trial")   // trial, active, suspended, cancelled
  trialEndsAt    DateTime?
  subscriptionId String?  // Stripe subscription ID
  customerId     String?  // Stripe customer ID
  
  // Configuration
  settings Json @default("{}") // JSON for flexible settings
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users     User[]
  projects  Project[]
  jobs      Job[]
  
  @@map("tenants")
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  name     String?
  tenantId String
  role     UserRole @default(USER)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  projects Project[]
  jobs     Job[]
  
  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  tenantId    String
  userId      String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("projects")
}

model Job {
  id          String   @id @default(cuid())
  title       String
  description String?
  department  String?
  location    String?
  type        String?  // CLT, PJ, Est√°gio, etc.
  salary      String?
  requirements Json @default("[]")
  benefits     Json @default("[]")
  status      JobStatus @default(ACTIVE)
  tenantId    String
  userId      String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("jobs")
}

enum UserRole {
  ADMIN
  USER
}

enum JobStatus {
  ACTIVE
  PAUSED
  CLOSED
}
