const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

// Configura√ß√£o do Supabase Admin (precisa das chaves de admin)
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY // Chave de servi√ßo

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas:')
  console.log('   NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå')
  console.log('   SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ' : '‚ùå')
  console.log('\nüí° Adicione a SUPABASE_SERVICE_ROLE_KEY no arquivo .env')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function setupSuperAdminAuth() {
  try {
    console.log('\nüîê CONFIGURA√á√ÉO DE AUTENTICA√á√ÉO SUPER_ADMIN')
    console.log('=' .repeat(50))
    
    const email = 'vivendamirassol@gmail.com'
    const password = 'Triaxia2025!' // Senha tempor√°ria segura
    
    console.log(`\nüìß Configurando autentica√ß√£o para: ${email}`)
    
    // Verificar se o usu√°rio j√° existe
    const { data: existingUsers, error: listError } = await supabase.auth.admin.listUsers()
    
    if (listError) {
      console.error('‚ùå Erro ao listar usu√°rios:', listError.message)
      return
    }
    
    const existingUser = existingUsers.users.find(user => user.email === email)
    
    if (existingUser) {
      console.log('üë§ Usu√°rio j√° existe no Supabase Auth')
      console.log(`   ID: ${existingUser.id}`)
      console.log(`   Email: ${existingUser.email}`)
      console.log(`   Confirmado: ${existingUser.email_confirmed_at ? 'Sim' : 'N√£o'}`)
      
      // Atualizar senha
      const { error: updateError } = await supabase.auth.admin.updateUserById(
        existingUser.id,
        { 
          password: password,
          email_confirm: true
        }
      )
      
      if (updateError) {
        console.error('‚ùå Erro ao atualizar senha:', updateError.message)
        return
      }
      
      console.log('‚úÖ Senha atualizada com sucesso!')
    } else {
      console.log('üë§ Criando novo usu√°rio no Supabase Auth...')
      
      // Criar novo usu√°rio
      const { data: newUser, error: createError } = await supabase.auth.admin.createUser({
        email: email,
        password: password,
        email_confirm: true // Confirmar email automaticamente
      })
      
      if (createError) {
        console.error('‚ùå Erro ao criar usu√°rio:', createError.message)
        return
      }
      
      console.log('‚úÖ Usu√°rio criado com sucesso!')
      console.log(`   ID: ${newUser.user.id}`)
      console.log(`   Email: ${newUser.user.email}`)
    }
    
    console.log('\nüéØ CREDENCIAIS DE ACESSO:')
    console.log(`   Email: ${email}`)
    console.log(`   Senha: ${password}`)
    console.log(`   URL: http://localhost:3001/login`)
    
    console.log('\nüõ°Ô∏è  SEGURAN√áA:')
    console.log('   - Altere a senha ap√≥s o primeiro login')
    console.log('   - Use uma senha forte e √∫nica')
    console.log('   - Considere ativar 2FA quando dispon√≠vel')
    
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error)
  }
}

// Executar o script
setupSuperAdminAuth().catch(console.error)