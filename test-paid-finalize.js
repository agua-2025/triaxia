// test-paid-finalize.js
// Script para testar o endpoint finalize com uma sess√£o "paga" simulada

require('dotenv').config({ path: '.env.local' });
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testPaidFinalize() {
  console.log('üß™ Testando finaliza√ß√£o com sess√£o "paga" simulada...');
  
  try {
    // 1. Criar uma sess√£o de checkout para "prada"
    console.log('1Ô∏è‚É£ Criando sess√£o de checkout para "prada"...');
    const checkoutResponse = await fetch('http://localhost:3001/api/stripe/checkout', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        plan: 'starter',
        tenantSlug: 'prada',
        userEmail: 'vivendamirassol@gmail.com'
      })
    });
    
    const checkoutData = await checkoutResponse.json();
    console.log('‚úÖ Sess√£o criada:', checkoutData.sessionId);
    
    // 2. Simular que a sess√£o foi paga modificando diretamente no Stripe (mock)
    // Como n√£o podemos modificar o Stripe em teste, vamos modificar temporariamente
    // o c√≥digo para aceitar nossa sess√£o como "paga"
    
    console.log('2Ô∏è‚É£ Simulando pagamento da sess√£o...');
    
    // Vamos criar um endpoint de teste que for√ßa uma sess√£o como paga
    const testPayload = {
      session_id: checkoutData.sessionId,
      force_paid: true, // Flag especial para teste
      metadata: {
        tenantSlug: 'prada',
        plan: 'starter',
        userEmail: 'vivendamirassol@gmail.com'
      }
    };
    
    console.log('3Ô∏è‚É£ Chamando endpoint de finaliza√ß√£o...');
    const response = await fetch('http://localhost:3001/api/stripe/finalize', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        session_id: checkoutData.sessionId
      })
    });
    
    const result = await response.text();
    console.log(`üìä Status: ${response.status}`);
    console.log(`üìã Resposta: ${result}`);
    
    // 4. Verificar se o tenant foi atualizado
    console.log('\n4Ô∏è‚É£ Verificando tenant "prada" no banco...');
    const pradaTenant = await prisma.tenant.findFirst({ where: { slug: 'prada' } });
    if (pradaTenant) {
      console.log(`‚úÖ Tenant encontrado: "${pradaTenant.name}" (ID: ${pradaTenant.id})`);
      console.log(`üìä Status: ${pradaTenant.status}`);
      console.log(`üí≥ Customer ID: ${pradaTenant.customerId}`);
    }
    
    // 5. Verificar usu√°rio
    console.log('\n5Ô∏è‚É£ Verificando usu√°rio...');
    const user = await prisma.user.findFirst({
      where: {
        email: 'vivendamirassol@gmail.com',
        tenantId: pradaTenant?.id
      }
    });
    if (user) {
      console.log(`‚úÖ Usu√°rio encontrado: ${user.email} (${user.name})`);
    }
    
    console.log('\nüìß Resultado esperado:');
    console.log('- Se a sess√£o fosse realmente paga, o email seria enviado');
    console.log('- O email mostraria "Bem-vindo √† Prada!" no cabe√ßalho');
    console.log('- N√£o "Bem-vindo √† Empresa todinho!"');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testPaidFinalize();