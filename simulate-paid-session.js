// simulate-paid-session.js
// Script para simular uma sess√£o paga e demonstrar o funcionamento correto

require('dotenv').config({ path: '.env.local' });
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function simulatePaidSession() {
  console.log('üß™ Simulando uma sess√£o PAGA para demonstrar o funcionamento correto...');
  
  try {
    // 1. Criar um tenant "prada" diretamente no banco para simular uma sess√£o paga
    console.log('1Ô∏è‚É£ Criando tenant "prada" (simulando sess√£o paga)...');
    
    // Primeiro, verificar se j√° existe
    let pradaTenant = await prisma.tenant.findFirst({ where: { slug: 'prada' } });
    
    if (pradaTenant) {
      console.log('‚úÖ Tenant "prada" j√° existe:', pradaTenant.name);
    } else {
      pradaTenant = await prisma.tenant.create({
        data: {
          name: 'Prada', // Nome correto da empresa
          slug: 'prada',
          domain: 'prada.triaxia.com.br',
          plan: 'starter',
          status: 'active',
          customerId: 'cus_simulated_prada',
          subscriptionId: 'sub_simulated_prada',
          settings: {
            onboardingCompleted: false,
            setupStep: 'company_info',
          },
        },
      });
      console.log('‚úÖ Tenant "prada" criado:', pradaTenant.name);
    }
    
    // 2. Criar/atualizar usu√°rio
    console.log('2Ô∏è‚É£ Criando/atualizando usu√°rio...');
    const user = await prisma.user.upsert({
      where: { 
        email_tenantId: { 
          email: 'vivendamirassol@gmail.com', 
          tenantId: pradaTenant.id 
        } 
      },
      create: {
        email: 'vivendamirassol@gmail.com',
        name: 'vivendamirassol',
        role: 'ADMIN',
        tenantId: pradaTenant.id,
      },
      update: {},
    });
    console.log('‚úÖ Usu√°rio criado/atualizado:', user.email);
    
    // 3. Simular envio de email de ativa√ß√£o
    console.log('3Ô∏è‚É£ Simulando envio de email de ativa√ß√£o...');
    
    // Importar a fun√ß√£o de envio de email
    const { sendActivationEmail } = require('./src/lib/email/activation-email.ts');
    const { createActivationToken } = require('./src/lib/auth/activation-service.ts');
    
    // Criar token de ativa√ß√£o
    const token = await createActivationToken({
      email: user.email,
      userId: user.id,
      tenantId: pradaTenant.id,
      expiresInHours: 48,
      createdFromIp: 'simulation',
    });
    
    // Enviar email
    const emailResult = await sendActivationEmail({
      email: user.email,
      name: user.name || user.email.split('@')[0],
      tenantName: pradaTenant.name, // Aqui est√° o nome correto: "Prada"
      tenantSlug: pradaTenant.slug,
      activationToken: token,
      expiresInHours: 48,
    });
    
    if (emailResult.success) {
      console.log('‚úÖ Email de ativa√ß√£o enviado com sucesso!');
      console.log('üìß Destinat√°rio:', user.email);
      console.log('üè¢ Nome da empresa no email:', pradaTenant.name);
      console.log('üîó O email deve mostrar "Bem-vindo √† Prada!" no cabe√ßalho');
    } else {
      console.log('‚ùå Erro ao enviar email:', emailResult.error);
    }
    
    // 4. Mostrar compara√ß√£o
    console.log('\n=== COMPARA√á√ÉO DOS TENANTS ===');
    const allTenants = await prisma.tenant.findMany({
      orderBy: { createdAt: 'desc' }
    });
    
    allTenants.forEach((t, i) => {
      console.log(`${i + 1}. Nome: "${t.name}" | Slug: "${t.slug}"`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro durante a simula√ß√£o:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

simulatePaidSession();